{"version":3,"sources":["store/posts/postActionType.js","history.js","store/posts/postAction.js","component/PostLists.js","component/Header.js","component/SinglePost.js","component/CreatePost.js","component/EditPost.js","Routes.js","store/posts/postReducer.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["GET_ALL_POST","GET_POST_BY_ID","CREATE_POST","LOADING","HIDE_LOADING","createBrowserHistory","axios","require","getAllPost","dispatch","get","then","response","type","ActionType","payload","data","catch","error","console","log","message","getPostById","postID","loading","PostLists","posts","useSelector","state","postData","useDispatch","useEffect","Actions","onDeletePost","id","delete","alert","err","renderedPosts","map","post","className","title","body","substring","style","margin","to","onClick","Header","SinglePost","props","match","params","singlePost","randersinglePost","CreatePost","useState","setTitle","content","setContent","userId","canSave","Boolean","savePost","JSON","stringify","method","url","headers","history","replace","htmlFor","name","placeholder","value","onChange","e","target","disabled","EditPost","POST","currenPost","filter","item","Routes","path","exact","component","Component","initial_state","postReducer","action","store","createStore","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.363bd170.chunk.js","sourcesContent":["export const GET_ALL_POST = 'GET_ALL_POST';\nexport const GET_POST_BY_ID = 'GET_POST_BY_ID';\nexport const CREATE_POST = 'CREATE_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const LOADING = 'LOADING';\nexport const HIDE_LOADING = 'HIDE_LOADING';\n","import { createBrowserHistory  } from \"history\";\nexport default createBrowserHistory();\n\n","import * as ActionType from './postActionType';\nimport history from '../../history'\n\nconst axios = require('axios');\n\n// export const getAllPost = () => {\n//     return {\n//         type:ActionType.GET_ALL_POST,\n//         payload:posts\n//     }    \n// }\n\n// export const getPostById = (post) => {\n//     return {\n//         type:ActionType.GET_POST_BY_ID,\n//         payload:post\n//     }    \n// }\n\nexport const getAllPost = () => {\n    return function(dispatch) {\n        return  axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(response=>{\n            dispatch({\n                type: ActionType.GET_ALL_POST,\n                payload:response.data\n            });\n        })\n        .catch(error=>{\n            console.log('error.message',error.message)\n        })\n    }\n}\n\n\nexport const getPostById = (postID) => {\n    return function(dispatch) {\n       return axios.get(`https://jsonplaceholder.typicode.com/posts/${postID}`)\n                .then(response=>{\n                    dispatch({\n                        type:ActionType.GET_POST_BY_ID,\n                        payload:response.data\n                    })\n                })\n                .catch(error=>{\n                    console.log('error.message',error.message)\n                })\n    } \n}\n\nexport const createPost = (post) => {\n    return function(dispatch) {\n       return axios({\n            method: 'POST',\n            url: 'https://jsonplaceholder.typicode.com/posts',\n            headers:  {\n                'Content-type': 'application/json; charset=UTF-8',\n              }, \n            data: post\n          }).then( response => {\n              alert('Post Created successfully...')\n              history.replace('/')\n              });\n    }\n   \n}\n\nexport const updatePost = (data,id) => {\n    \n    return function(dispatch) {\n        return axios({\n            method: 'PUT',\n            url: `https://jsonplaceholder.typicode.com/posts/${id}`,\n            headers:  {\n                'Content-type': 'application/json; charset=UTF-8',\n                }, \n            data: data\n            }).then( response => {\n                alert('Post Updated successfully...')\n                history.replace('/')\n                });\n        }\n   \n}\n\n\nexport const deletePost = (id) => {\n    return function(dispatch){\n        return  axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`)\n        .then(response=> {\n          alert('Post deleted successfully..')\n          dispatch({\n            type:ActionType.HIDE_LOADING  \n          })\n        }).catch(err => console.log(err.message))\n    }\n}\n\n\nexport const loading = () => {\n    return {\n        type:ActionType.LOADING\n    }    \n}\n","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport * as Actions from '../store/posts/postAction'\nimport { Link } from 'react-router-dom'\n\nconst PostLists = () => {\n    const  posts = useSelector(state => state.postData);\n    const loading = useSelector(state => state.loading)\n    const dispatch = useDispatch();\n    \n\n    useEffect( ()=> {\n      dispatch(Actions.loading())\n      dispatch(Actions.getAllPost())\n    },[Actions.getAllPost])\n\n   \n\n    const onDeletePost = (id) => {\n      dispatch(Actions.loading())\n      dispatch(Actions.deletePost(id))\n    }\n\n    const renderedPosts = posts.map(post => (\n        <article className=\"post-excerpt\" key={post.id}>\n          <h3>{post.title}</h3>\n          <p className=\"post-content\">{post.body.substring(0, 100)}</p>\n         <Link style={{margin:'5px'}} to={`/posts/${post.id}`} className=\"button muted-button\">\n            View Post\n          </Link>\n          <Link  style={{margin:'5px'}} to={`/postedit/${post.id}`} className=\"btn btn-info\">\n            Edit Post\n          </Link>\n          <button onClick={ () => onDeletePost(post.id)} className=\"btn btn-danger\" >Delete Post</button>\n        </article>\n      ))\n\n    return(\n        <div>\n            {loading  ? <h1>Loading...</h1> : ''}\n            {posts  ? renderedPosts : 'No data found'}\n        </div>\n    )\n}\nexport default PostLists;","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n    return(\n        <div>\n            <nav>\n            <section>\n                <h1>React Redux demo</h1>\n\n                <div className=\"navContent\">\n                <div className=\"navLinks\">\n                <div className=\"navLinks\">\n                    <Link to=\"/\">Posts</Link>\n                    <Link to=\"/create-post\">Create Post</Link>\n                </div>\n                </div>\n                </div>\n            </section>\n            </nav>\n        </div>\n    )\n}\n\nexport default Header;","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport * as Actions from '../store/posts/postAction'\nimport { Link } from 'react-router-dom'\n\nconst SinglePost = (props) => {\n    const {id} = props.match.params;\n    \n    const singlePost = useSelector(state => state.singlePost);\n    const loading = useSelector(state => state.loading)\n    const dispatch = useDispatch();\n\n\n    useEffect( ()=> {\n        dispatch(Actions.loading())\n        dispatch(Actions.getPostById(id))\n    },[Actions.getPostById])\n\n\n    const randersinglePost =  (\n        <div>\n            <h3>{singlePost.title}</h3>\n          <p className=\"post-content\">{singlePost.body}</p>\n            <Link to={`/`} className=\"button muted-button\">\n                Back to Post\n            </Link>\n        </div>\n    )\n\n    return(\n        <div>\n            <div>\n            {loading ? <h1>Loading...</h1> : ''}\n            {singlePost  ? randersinglePost : 'No data found'}\n        </div>\n        </div>\n    )\n}   \n\nexport default SinglePost;","import React, {useEffect, useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport * as Actions from '../store/posts/postAction'\nimport history from '../history'\n\nconst axios = require('axios');\n\n\nconst CreatePost = () => {\n    const [title, setTitle] = useState('')\n    const [content, setContent] = useState('')\n    const userId = useSelector(state => state.userId)\n    const loading = useSelector(state => state.loading)\n    const dispatch = useDispatch();\n    const onTitleChanged = (e) => (\n        setTitle(e.target.value)\n    )\n\n    const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n\n    const onContentChanged = (e) => (\n        setContent(e.target.value)\n    )\n\n    const onSavePostClicked = () => {\n        if(title && content) {\n            savePost();\n        }\n    }\n\n    const savePost = () => {\n        dispatch(Actions.loading())\n        const data = JSON.stringify({\n            title: title,\n            body: content,\n            userId: userId,\n            })\n        dispatch(Actions.createPost(data)) \n    }\n\n    return(\n        <section>\n        <h2>New Post</h2>\n            {loading ? <h1>Loading...</h1> : ''}\n            <form>\n            <label htmlFor=\"postTitle\">Post Title:</label>\n                <input \n                    type=\"text\" \n                    id=\"postTitle\" \n                    name=\"postTitle\"\n                    placeholder=\"Enter Title\"\n                    value={title}\n                    onChange={onTitleChanged} \n                />\n               <label htmlFor=\"postBody\">Body:</label>\n                <textarea\n                    id=\"postBody\"\n                    name=\"postBody\"\n                    placeholder=\"Enter Body\"\n                    value={content}\n                    onChange={onContentChanged}\n                />\n\n                <button type=\"button\"  disabled={!canSave} onClick={onSavePostClicked}>Save Post</button>  \n            </form>\n        </section>\n    )\n}\n\n\nexport default CreatePost;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport * as Actions from '../store/posts/postAction'\n\n\nconst EditPost = (props) => {\n    const {id} = props.match.params;\n    const loading = useSelector(state => state.loading)\n    const userId = useSelector(state => state.userId)\n    const POST = useSelector(state => state.postData)\n    const dispatch = useDispatch()\n    let currenPost = POST.filter(item => item.id == id)\n    currenPost = currenPost[0];\n    //console.log('currenPost',currenPost)\n    \n    const [title, setTitle] = useState(currenPost.title)\n    const [content, setContent] = useState(currenPost.body)\n\n    const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n\n    const onTitleChanged = (e) => (\n        setTitle(e.target.value)\n    )\n\n    const onContentChanged = (e) => (\n        setContent(e.target.value)\n    )\n\n    const onSavePostClicked = () => {\n        if(title && content) {\n            savePost();\n        }\n    }\n\n    const savePost = () => {\n        dispatch(Actions.loading())\n        const data = JSON.stringify({\n            id:id,\n            title: title,\n            body: content,\n            userId: userId,\n            })\n        dispatch(Actions.updatePost(data,id)) \n        \n    }\n\n    return(\n        <section>\n        <h2>Edit Post</h2>\n            {loading  ? <h1>Loading...</h1> : ''}\n            <form>\n            <label htmlFor=\"postTitle\">Post Title:</label>\n                <input \n                    type=\"text\" \n                    id=\"postTitle\" \n                    name=\"postTitle\"\n                    placeholder=\"Enter Title\"\n                    value={title}\n                    onChange={onTitleChanged} \n                />\n               <label htmlFor=\"postBody\">Body:</label>\n                <textarea\n                    id=\"postBody\"\n                    name=\"postBody\"\n                    placeholder=\"Enter Body\"\n                    value={content}\n                    onChange={onContentChanged}\n                />\n\n                <button type=\"button\"  disabled={!canSave} onClick={onSavePostClicked}>Update Post</button>  \n            </form>\n        </section>\n    )\n}\n\nexport default EditPost;","import React, {Component} from 'react';\nimport {Router, Route, Switch, Redirect} from 'react-router-dom';\nimport PostLists from './component/PostLists'\nimport history from './history'\n\nimport Header from './component/Header'\nimport SinglePost from './component/SinglePost'\nimport CreatePost from './component/CreatePost'\nimport EditPost from './component/EditPost';\n\nclass Routes extends Component{\n    render(){\n        return(\n            <Router history={history}>\n            <Header />\n            <Switch>\n                <Route path='/' exact  component={PostLists}/>\n                <Route path='/posts/:id'   component={SinglePost}/>\n                <Route path='/create-post'   component={CreatePost}/>\n                <Route path='/postedit/:id'   component={EditPost}/>\n            </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default Routes;","import * as ActionType from './postActionType';\n\nconst initial_state = {\n    postData:[],\n    userId:1,\n    loading:false,\n    singlePost:[]\n}\n\nconst postReducer = (state = initial_state, action) => {\n    switch(action.type) {\n        case ActionType.GET_ALL_POST : return {\n            ...state,\n            postData:action.payload,\n            singlePost:[],\n            loading:false\n        }\n        case ActionType.GET_POST_BY_ID : return {\n            ...state,\n            singlePost:action.payload,\n            loading:false\n        }\n        case ActionType.CREATE_POST : return {\n            ...state,\n            postData: [...state.postData, action.payload],\n            loading:false\n        }\n        case ActionType.LOADING : return {\n            ...state,\n            loading:true\n        }\n        case ActionType.HIDE_LOADING : return {\n            ...state,\n            loading:false\n        }\n\n        default: return state\n    }\n}\n\nexport default postReducer;","import {createStore, applyMiddleware} from 'redux';\nimport postReducer from './posts/postReducer';\nimport thunk from \"redux-thunk\" \n\nconst store = createStore(postReducer,applyMiddleware(thunk) );\nexport default store;\n","import './App.css';\nimport Routes from './Routes'\nimport {Provider} from 'react-redux'\nimport store from './store'\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Routes />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}