{"version":3,"sources":["actions/actionTypes.js","history.js","actions/actions.js","component/AddPost.js","component/EditPost.js","component/Navbar.js","component/PostList.js","component/singlePost.js","routes.js","App.js","reportWebVitals.js","reducers/PostReducer.js","index.js"],"names":["GET_ALL_POST","GET_POST_BY_ID","ADD_POST","UPDATE_POST","DELETE_POST","SHOW_LOADER","HIDE_LOADER","createBrowserHistory","Axios","require","getPostsById","postId","dispatch","get","then","response","type","ACTION_TYPES","payload","data","catch","error","console","log","code","Content","Layout","layout","labelCol","span","wrapperCol","tailLayout","offset","AddPost","useDispatch","useState","title","body","values","setValues","userId","useSelector","state","handleOnChange","name","e","persist","value","target","onFinish","params","post","status","alert","history","replace","onFinishFailed","errorInfo","Item","label","onChange","rules","required","message","TextArea","htmlType","EditPost","match","Form","useForm","form","id","singlePost","useEffect","ACTIONS","setFieldsValue","put","Navbar","className","to","Column","Table","PostList","postList","allPosts","deletePost","delete","dataSource","rowKey","posts","dataIndex","render","text","record","size","onClick","SinglePost","bordered","style","width","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","InitialState","loading","PostReducer","action","postData","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.60066144.chunk.js","sourcesContent":["export const GET_ALL_POST = 'GET_ALL_POST'\n\nexport const GET_POST_BY_ID = 'GET_POST_BY_ID'\n\nexport const ADD_POST = 'ADD_POST'\n\nexport const UPDATE_POST = 'UPDATE_POST'\n\nexport const DELETE_POST = 'DELETE_POST'\n\nexport const SHOW_LOADER = 'SHOW_LOADER'\n\nexport const HIDE_LOADER = 'HIDE_LOADER'","import { createBrowserHistory  } from \"history\";\nexport default createBrowserHistory();","import * as ACTION_TYPES from \"./actionTypes\";\nimport history from '../history';\n\nconst Axios = require(\"axios\");\n\nexport const getPosts = () => {\n  return (dispatch) => {\n    return Axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((response) => {\n        dispatch({\n          type: ACTION_TYPES.GET_ALL_POST,\n          payload: response.data\n        });\n      })\n      .catch((error) => {\n        console.log(error, error.code, error, \"ERRORS\");\n      });\n  };\n};\n\nexport const savePost = (params) => {\n  return (dispatch) => {\n    dispatch({ type: ACTION_TYPES.ADD_POST });\n\n    Axios.post(\"https://jsonplaceholder.typicode.com/posts\", params)\n      .then((response) => {\n        if (response.status === 201 && response.data) {\n          alert(\"Post Created successfully...\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error, error.code, error, \"ERRORS\");\n      });\n  };\n};\n\nexport const deletePost = (postId) => {\n  return (dispatch) => {\n    return Axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n      .then((response) => {\n        alert('Post Deleted successfully...')\n        dispatch({\n          type: ACTION_TYPES.DELETE_POST,\n          postId: postId,\n          payload: response.data,\n        });\n      })\n      .catch((error) => {\n        console.log(error, error.code, error, \"ERRORS\");\n      });\n  };\n};\n\nexport const getPostsById = (postId) => {\n  return (dispatch) => {\n    return Axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n    .then((response) => {\n      dispatch({\n        type: ACTION_TYPES.GET_POST_BY_ID,\n        payload: response.data\n      });\n    })\n    .catch((error) => {\n      console.log(error, error.code, error, \"ERRORS\");\n    })\n  }\n};\n\nexport const updatePost = (params, postId) => {\n  return (dispatch) => {\n    dispatch({ type: ACTION_TYPES.UPDATE_POST });\n\n    Axios.put(`https://jsonplaceholder.typicode.com/posts/${postId}`, params)\n      .then((response) => {\n        if (response.status === 200 && response.data) {\n          alert(\"Post Edited successfully...\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error, error.code, error, \"ERRORS\");\n      });\n  };\n};\n\nexport const SHOW_LOADER = () => {\n  return {\n    type: ACTION_TYPES.SHOW_LOADER,\n  };\n};\n\nexport const HIDE_LOADER = () => {\n  return {\n    type: ACTION_TYPES.HIDE_LOADER,\n  };\n};","import react, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Layout } from \"antd\";\nimport * as ACTIONS from \"../actions/actions\";\nconst { Content } = Layout;\n\nconst layout = {\n  labelCol: { span: 5 },\n  wrapperCol: { span: 10 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst AddPost = () => {\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({ title: \"\", body: \"\" });\n  const userId = useSelector((state) => state.userId);\n\n  const onFinish = (values) => {\n    values.userId = userId;\n    // dispatch(ACTIONS.SHOW_LOADER())\n    dispatch(ACTIONS.savePost(values));\n  };\n\n  const handleOnChange = (name) => (e) => {\n    e.persist();\n    const value = e.target.value;\n    setValues((values) => ({\n      ...values,\n      [name]: value,\n    }));\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <Layout>\n      <Content>\n        <Form\n          {...layout}\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            value={values.title}\n            onChange={handleOnChange(\"title\")}\n            rules={[{ required: true, message: \"Please enter title!\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Content\"\n            name=\"body\"\n            value={values.body}\n            onChange={handleOnChange(\"body\")}\n            rules={[{ required: true, message: \"Please enter content!\" }]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Add Post\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default AddPost;\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Button, Layout } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as ACTIONS from \"../actions/actions\";\n\nconst { Content } = Layout;\n\nconst layout = {\n  labelCol: { span: 5 },\n  wrapperCol: { span: 10 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst EditPost = ({ match }) => {\n  const [form] = Form.useForm();\n  const { id } = match.params;\n\n  const post = useSelector((state) => state.singlePost);\n\n  const [values, setValues] = useState({\n    title: post.title,\n    body: post.body,\n  });\n\n  const userId = useSelector((state) => state.userId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(ACTIONS.getPostsById(id));\n  }, []);\n\n  const onFinish = (values) => {\n    values.userId = userId;\n    dispatch(ACTIONS.updatePost(values, id));\n  };\n\n  const handleOnChange = (name) => (e) => {\n    e.persist();\n    const value = e.target.value;\n    setValues((values) => ({\n      ...values,\n      [name]: value,\n    }));\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      title: post.title,\n      body: post.body,\n    });\n  }, [post]);\n\n  return (\n    <Layout>\n      <Content>\n        <Form\n          {...layout}\n          form={form}\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            value={values.title}\n            onChange={handleOnChange(\"title\")}\n            rules={[{ required: true, message: \"Please enter title!\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Content\"\n            name=\"body\"\n            value={values.body}\n            onChange={handleOnChange(\"body\")}\n            rules={[{ required: true, message: \"Please enter content!\" }]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Edit Post\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default EditPost;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>React Redux Test demo</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n          <Link to=\"/\">Posts</Link>\n          <Link to=\"/add-post\">Add Post</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Table, Tag, Space } from \"antd\";\nimport * as ACTIONS from \"../actions/actions\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"antd\";\nconst { Column } = Table;\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n  const postList = useSelector((state) => state.allPosts);\n  \n\n  useEffect(() => {\n    // dispatch(ACTIONS.SHOW_LOADER());\n    dispatch(ACTIONS.getPosts());\n  }, []);\n\n  const deletePost = (postId) => {\n    dispatch(ACTIONS.deletePost(postId))\n  };\n\n  return (\n    <Table dataSource={postList} rowKey={(posts) => posts.id}>\n      <Column title=\"Id\" dataIndex=\"id\" key=\"id\" />\n      <Column title=\"Title\" dataIndex=\"title\" key=\"title\" />\n      <Column\n        title=\"Action\"\n        key=\"action\"\n        render={(text, record) => (\n          <Space size=\"middle\">\n            <Link to={`/posts/${text.id}`}>View</Link>\n            <Link to={`/edit-post/${text.id}`}>Edit</Link>\n            <Button type=\"link\" onClick={() => deletePost(text.id)}>\n              Delete\n            </Button>\n          </Space>\n        )}\n      />\n    </Table>\n  );\n};\n\nexport default PostList;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as ACTIONS from \"../actions/actions\";\nimport { Card } from \"antd\";\n\nconst SinglePost = ({ match }) => {\n  const { id } = match.params;\n  const dispatch = useDispatch();\n  const singlePost = useSelector((state) => state.singlePost);\n\n  useEffect(() => {\n    // dispatch(ACTIONS.SHOW_LOADER());\n    dispatch(ACTIONS.getPostsById(id));\n  }, []);\n\n  return (\n    <div className=\"site-card-border-less-wrapper\">\n      <Card title=\"Post Details\" bordered={true} style={{ width: 500 }}>\n        <p>\n          <b>Id:</b> {singlePost.id}\n        </p>\n        <p>\n          <b>Title:</b> {singlePost.title}\n        </p>\n        <p>\n          <b>Content:</b> {singlePost.body}\n        </p>\n      </Card>\n    </div>\n  );\n};\n\nexport default SinglePost;\n","import React from \"react\";\n\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport AddPost from \"./component/AddPost\";\nimport EditPost from \"./component/EditPost\";\nimport Navbar from \"./component/Navbar\";\nimport PostList from \"./component/PostList\";\nimport SinglePost from \"./component/singlePost\";\nimport history from \"./history\";\n\nconst Routes = () => {\n  return (\n    <div>\n      <Router history={history}>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={PostList} />\n            <Route exact path=\"/add-post\" component={AddPost} />\n            <Route exact path=\"/posts/:id\" component={SinglePost} />\n            <Route exact path=\"/edit-post/:id\" component={EditPost} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default Routes;\n","import React from 'react'\n\nimport Routes from './routes';\nimport 'antd/dist/antd.css';\n\nconst App = () => {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as ACTION_TYPES from \"../actions/actionTypes\";\n\nconst InitialState = {\n  allPosts: [],\n  singlePost: [],\n  userId: 1,\n  loading: false,\n};\n\nconst PostReducer = (state = InitialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.GET_ALL_POST:\n      return {\n        ...state,\n        allPosts: action.payload,\n        singlePost: [],\n        // loading: false,\n      };\n\n    case ACTION_TYPES.ADD_POST:\n      return {\n        ...state,\n        postData: action.payload,\n        // loading: false,\n      };\n\n    case ACTION_TYPES.DELETE_POST:\n      return {\n        ...state,\n        singlePost: null,\n      };\n\n    case ACTION_TYPES.GET_POST_BY_ID:\n      return {\n        ...state,\n        singlePost: action.payload,\n      };\n\n    case ACTION_TYPES.UPDATE_POST:\n      return {\n        ...state,\n        postData: action.payload,\n        // loading: false,\n      };\n\n    case ACTION_TYPES.SHOW_LOADER:\n      return {\n        ...state,\n        loading: true,\n      };\n    case ACTION_TYPES.HIDE_LOADER:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default PostReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport PostReducer from \"./reducers/PostReducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(PostReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}